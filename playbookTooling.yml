---
- name: Configure Tooling and Services on Ubuntu 22.04
  hosts: Tooling
  become: yes
  tasks:
    # Cleanup existing configurations
    - name: Remove existing Docker and Jenkins repository files and keys
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/sources.list.d/docker.list
        - /etc/apt/sources.list.d/jenkins.list
        - /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list
        - /usr/share/keyrings/docker-archive-keyring.gpg
        - /usr/share/keyrings/jenkins-keyring.gpg
        - /usr/share/keyrings/jenkins-keyring.asc
      ignore_errors: no

    # Verification of removals
    - name: Verify Docker repository file removal
      stat:
        path: /etc/apt/sources.list.d/docker.list
      register: docker_list_stat
      failed_when: docker_list_stat.stat.exists

    - name: Verify Docker GPG key file removal
      stat:
        path: /usr/share/keyrings/docker-archive-keyring.gpg
      register: docker_key_stat
      failed_when: docker_key_stat.stat.exists

    - name: Verify Jenkins repository file removal
      stat:
        path: /etc/apt/sources.list.d/jenkins.list
      register: jenkins_list_stat
      failed_when: jenkins_list_stat.stat.exists

    - name: Verify Jenkins GPG key file removal
      stat:
        path: /usr/share/keyrings/jenkins-keyring.gpg
      register: jenkins_key_stat
      failed_when: jenkins_key_stat.stat.exists

    # Configure firewall ports
    - name: Open necessary ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '22'    # SSH
        - '8080'  # Jenkins

    - name: Enable UFW
      ufw:
        state: enabled
   
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install OpenJDK 17
      apt:
        name: openjdk-17-jdk
        state: present

    # Configure Docker
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /usr/share/keyrings/docker-archive-keyring.gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Install prerequisites for Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Download Docker Compose binary
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.29.1/docker-compose-linux-x86_64"
        dest: /tmp/docker-compose
        mode: '0755'
        validate_certs: yes

    - name: Move Docker Compose to /usr/local/bin
      command: mv /tmp/docker-compose /usr/local/bin/docker-compose
      args:
        creates: /usr/local/bin/docker-compose

    - name: Ensure Docker Compose is executable
      file:
        path: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Verify Docker Compose installation
      command: docker-compose --version
      register: docker_compose_version
      failed_when: docker_compose_version.rc != 0
      changed_when: false

    # Configure Jenkins
    - name: Create Jenkins group
      group:
        name: jenkins
        state: present

    - name: Create Jenkins user
      user:
        name: jenkins
        group: jenkins
        shell: /bin/bash
        home: /var/lib/jenkins
        createhome: yes

    - name: Create necessary directories for Jenkins
      file:
        path: "{{ item }}"
        state: directory
        owner: jenkins
        group: jenkins
        mode: '0755'
      loop:
        - /var/lib/jenkins
        - /var/cache/jenkins
        - /var/log/jenkins

    - name: Add Jenkins repository key
      get_url:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        dest: /usr/share/keyrings/jenkins-keyring.asc
        mode: '0644'

    - name: Add Jenkins repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/"
        state: present
        filename: jenkins

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Ensure Jenkins service is running
      systemd:
        name: jenkins
        state: started
        enabled: yes

    # Install Ansible
    - name: Install Ansible
      apt:
        name: ansible
        state: present

    # Install Terraform
    - name: Install unzip
      apt:
        name: unzip
        state: present

    - name: Get latest Terraform version
      uri:
        url: https://checkpoint-api.hashicorp.com/v1/check/terraform
        return_content: yes
      register: terraform_version_check

    - name: Set Terraform version fact
      set_fact:
        terraform_version: "{{ terraform_version_check.json.current_version }}"

    - name: Download Terraform binary
      get_url:
        url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
        dest: /tmp/terraform.zip

    - name: Unzip Terraform binary
      unarchive:
        src: /tmp/terraform.zip
        dest: /usr/local/bin/
        remote_src: yes
        mode: '0755'

    - name: Clean up Terraform download
      file:
        path: /tmp/terraform.zip
        state: absent

    # Various checks
    - name: Check Jenkins status
      command: systemctl status jenkins
      register: jenkins_status
      ignore_errors: yes

    - name: Display Jenkins status
      debug:
        var: jenkins_status.stdout_lines

    - name: Check Jenkins logs
      command: journalctl -xeu jenkins.service
      register: jenkins_logs
      ignore_errors: yes

    - name: Display Jenkins logs
      debug:
        var: jenkins_logs.stdout_lines